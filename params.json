{"name":"Redux-base-app","tagline":"Our base app for react + redux projects","body":"# ReduxBaseApp\r\n\r\n### Start up\r\n\r\n* `npm install` to download and install all dependencies.\r\n* `npm start` to start the node server.\r\n\r\nYour app will be running on port 3000.\r\n\r\n## Terms in redux\r\nhttp://rackt.org/redux/docs/Glossary.html#action-creator\r\n\r\n## Flux standart actions\r\nHow does your actions should look like:\r\nhttps://github.com/acdlite/flux-standard-action\r\n\r\n## Redux thunk\r\nHow to create async actions:\r\nhttps://github.com/gaearon/redux-thunk\r\n\r\n## React router\r\nhttps://github.com/rackt/react-router\r\n\r\n## Redux simple router\r\nhttps://github.com/rackt/redux-simple-router\r\n\r\n## What are containers\r\nA container does data fetching and then renders its corresponding sub-component. Thatâ€™s it.\r\nhttps://medium.com/@learnreact/container-components-c0e67432e005#.5wwoj3ph3\r\nSo, when should I use containers in this architecture? When the props injected to the smart component are so complex that it should have its on file. Due to reselect and the easyness of connect, probably you won't see the need soon\r\n\r\n## Smart and dumb components\r\nhttps://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.iugz80pst\r\nIn this architecture, the smart components are under layouts and correspond to route handlers, and dumb components are under components\r\n\r\n##Redux resources\r\nMore info on redux\r\nhttps://github.com/xgrommx/awesome-redux\r\n\r\n# ReduxBaseApp Recipies\r\n\r\nRecipies are some examples about how to implement specific features. Here is a list of all recipies we've done so far\r\n- [ Drag and drop](DnDRecipe.md)\r\n- [Modal](ModalRecipe.md)\r\n","google":"UA-73447422-1","note":"Don't delete this file! It's used internally to help with page regeneration."}